// Code generated by generate-ast. DO NOT EDIT.
package ast

import "github.com/michael-go/lox/golox/internal/token"

type Expr[R any] interface {
	Accept(visitor Visitor[R]) R
}

type Binary[R any] struct {
	Left     Expr[R]
	Operator token.Token
	Right    Expr[R]
}

type Grouping[R any] struct {
	Expression Expr[R]
}

type Literal[R any] struct {
	Value any
}

type Unary[R any] struct {
	Operator token.Token
	Right    Expr[R]
}

type Visitor[R any] interface {
	VisitBinaryExpr(expr Binary[R]) R
	VisitGroupingExpr(expr Grouping[R]) R
	VisitLiteralExpr(expr Literal[R]) R
	VisitUnaryExpr(expr Unary[R]) R
}

func (expr Binary[R]) Accept(visitor Visitor[R]) R {
	return visitor.VisitBinaryExpr(expr)
}

func (expr Grouping[R]) Accept(visitor Visitor[R]) R {
	return visitor.VisitGroupingExpr(expr)
}

func (expr Literal[R]) Accept(visitor Visitor[R]) R {
	return visitor.VisitLiteralExpr(expr)
}

func (expr Unary[R]) Accept(visitor Visitor[R]) R {
	return visitor.VisitUnaryExpr(expr)
}
