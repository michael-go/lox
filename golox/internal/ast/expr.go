// Code generated by generate-ast. DO NOT EDIT.
package ast

import "github.com/michael-go/lox/golox/internal/token"

var _ = token.Token{} // to avoid unused import error

type Expr interface {
	Accept(visitor ExprVisitor) any
}

type Assign struct {
	Name  token.Token
	Value Expr
}

type Binary struct {
	Left     Expr
	Operator token.Token
	Right    Expr
}

type Call struct {
	Callee    Expr
	Paren     token.Token
	Arguments []Expr
}

type Grouping struct {
	Expression Expr
}

type Literal struct {
	Value any
}

type Logical struct {
	Left     Expr
	Operator token.Token
	Right    Expr
}

type Unary struct {
	Operator token.Token
	Right    Expr
}

type Variable struct {
	Name token.Token
}

type ExprVisitor interface {
	VisitAssignExpr(expr Assign) any
	VisitBinaryExpr(expr Binary) any
	VisitCallExpr(expr Call) any
	VisitGroupingExpr(expr Grouping) any
	VisitLiteralExpr(expr Literal) any
	VisitLogicalExpr(expr Logical) any
	VisitUnaryExpr(expr Unary) any
	VisitVariableExpr(expr Variable) any
}

func (expr Assign) Accept(visitor ExprVisitor) any {
	return visitor.VisitAssignExpr(expr)
}

func (expr Binary) Accept(visitor ExprVisitor) any {
	return visitor.VisitBinaryExpr(expr)
}

func (expr Call) Accept(visitor ExprVisitor) any {
	return visitor.VisitCallExpr(expr)
}

func (expr Grouping) Accept(visitor ExprVisitor) any {
	return visitor.VisitGroupingExpr(expr)
}

func (expr Literal) Accept(visitor ExprVisitor) any {
	return visitor.VisitLiteralExpr(expr)
}

func (expr Logical) Accept(visitor ExprVisitor) any {
	return visitor.VisitLogicalExpr(expr)
}

func (expr Unary) Accept(visitor ExprVisitor) any {
	return visitor.VisitUnaryExpr(expr)
}

func (expr Variable) Accept(visitor ExprVisitor) any {
	return visitor.VisitVariableExpr(expr)
}
